Git是一个版本控制系统，版本控制系统是设计用于跟踪文件随时间变化状态的一款软件。更具体地说，Git是一个分布式的版本控制系统。这就意味着，在Git参与项目的每个程序员不仅能拥有文件的当前状态，还能拥有完整的历史记录。
(1)撤销更改功能
如果编译过程出错，你可以回到之前一个时间点，撤销错误的修改
(2)一个包含所有更改的完整历史记录
如果你想去了解之前的项目状态，你 可以检查项目的先前版本以详细查看当时文件的状态
(3)对改动原因进行文档记录
我们一般很难记住修改代码的原因，使用过Git提交信息功能，就可以很容易地对你之前所做的改动的原因进行文档记录，以备参考
(4)修改一切的信心
既然我们可以如此容易地恢复之前的项目状态，那么我们就可以放心地对项目进行你想要的修改，不用顾忌写错后无法改会之前正确的代码，毕竟大不了一切重头再来还是很浪费时间的。

为什么使用GitHub
GitHub在提供存储Git库的地方的功能的基础上，还提供了许多额外的好处，包括执行以下操作的能力：
(一)文档需求
使用提出问题，可以记录项目的缺陷或指定新的功能，然后这些功能由你的团队进行开发
(二)独立分支流记录的协作
(三)评估工作进展
(四)看到团队的进展
通过pulse或提交历史命令，你可以看到团队的工作进展Git是一个版本控制系统，版本控制系统是设计用于跟踪文件随时间变化状态的一款软件。更具体地说，Git是一个分布式的版本控制系统。这就意味着，在Git参与项目的每个程序员不仅能拥有文件的当前状态，还能拥有完整的历史记录。
(1)撤销更改功能
如果编译过程出错，你可以回到之前一个时间点，撤销错误的修改
(2)一个包含所有更改的完整历史记录
如果你想去了解之前的项目状态，你 可以检查项目的先前版本以详细查看当时文件的状态
(3)对改动原因进行文档记录
我们一般很难记住修改代码的原因，使用过Git提交信息功能，就可以很容易地对你之前所做的改动的原因进行文档记录，以备参考
(4)修改一切的信心
既然我们可以如此容易地恢复之前的项目状态，那么我们就可以放心地对项目进行你想要的修改，不用顾忌写错后无法改会之前正确的代码，毕竟大不了一切重头再来还是很浪费时间的。

为什么使用GitHub
GitHub在提供存储Git库的地方的功能的基础上，还提供了许多额外的好处，包括执行以下操作的能力：
(一)文档需求
使用提出问题，可以记录项目的缺陷或指定新的功能，然后这些功能由你的团队进行开发
(二)独立分支流记录的协作
(三)评估工作进展
(四)看到团队的进展
通过pulse或提交历史命令，你可以看到团队的工作进展
